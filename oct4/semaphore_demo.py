import random
import threading
import time

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏ –æ–±—â–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ---------------------------------

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º–∞—Ñ–æ—Ä–∞ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º 3
semaphore = threading.Semaphore(3)

# –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏, –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –º—å—é—Ç–µ–∫—Å–æ–º
active_workers = []
active_lock = threading.Lock()


def timestamp() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ª–æ–≥–æ–≤."""
    return time.strftime("%H:%M:%S")


def snapshot_active():
    """–°–æ–∑–¥–∞–µ—Ç —Å–Ω–∏–º–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤."""
    with active_lock:
        return sorted(active_workers)


def worker(worker_id):
    """–§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–æ–∫–∞"""
    # –§–∏–∫—Å–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–∂–∏–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –≤—ã—á–∏—Å–ª–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
    request_start = time.perf_counter()
    print(f"[{timestamp()}] –†–∞–±–æ—Ç–Ω–∏–∫ {worker_id}: –ø—Ä–æ—Å–∏—Ç –¥–æ—Å—Ç—É–ø (–∞–∫—Ç–∏–≤–Ω—ã–µ: {snapshot_active()})")

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–µ–º–∞—Ñ–æ—Ä –º–≥–Ω–æ–≤–µ–Ω–Ω–æ, —á—Ç–æ–±—ã –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å.
    acquired_immediately = semaphore.acquire(blocking=False)
    if not acquired_immediately:
        print(f"[{timestamp()}] –†–∞–±–æ—Ç–Ω–∏–∫ {worker_id}: –≤ –æ—á–µ—Ä–µ–¥–∏ (–∞–∫—Ç–∏–≤–Ω—ã–µ: {snapshot_active()})")
        semaphore.acquire()

    # –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Ç–æ–∫ –ø—Ä–æ–≤–µ–ª, –æ–∂–∏–¥–∞—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –æ—Ç —Å–µ–º–∞—Ñ–æ—Ä–∞.
    wait_time = time.perf_counter() - request_start

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫ –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö, —á—Ç–æ–±—ã –≤—ã–≤–æ–¥–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç–∏–Ω—É.
    with active_lock:
        active_workers.append(worker_id)
        current_active = sorted(active_workers)

    print(
        f"[{timestamp()}] –†–∞–±–æ—Ç–Ω–∏–∫ {worker_id}: –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø "
        f"(–∂–¥–∞–ª {wait_time:.2f} —Å). –ê–∫—Ç–∏–≤–Ω—ã–µ: {current_active}"
    )

    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–µ–∫—Ü–∏–∏.
    work_time = random.uniform(1, 3)
    time.sleep(work_time)
    print(
        f"[{timestamp()}] –†–∞–±–æ—Ç–Ω–∏–∫ {worker_id}: –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É "
        f"(—Ä–∞–±–æ—Ç–∞–ª {work_time:.2f} —Å)"
    )

    # –£–¥–∞–ª—è–µ–º –ø–æ—Ç–æ–∫ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–ª–æ—Ç –≤ —Å–µ–º–∞—Ñ–æ—Ä–µ.
    with active_lock:
        active_workers.remove(worker_id)
        remaining = sorted(active_workers)

    semaphore.release()
    print(
        f"[{timestamp()}] –†–∞–±–æ—Ç–Ω–∏–∫ {worker_id}: –æ—Å–≤–æ–±–æ–¥–∏–ª –¥–æ—Å—Ç—É–ø "
        f"(–æ—Å—Ç–∞–ª–∏—Å—å: {remaining})"
    )


def launch_workers(total: int, delay: float = 0.0):
    """–°–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç `total` –ø–æ—Ç–æ–∫–æ–≤ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –º–µ–∂–¥—É —Å—Ç–∞—Ä—Ç–∞–º–∏."""
    threads = []
    for worker_id in range(total):
        thread = threading.Thread(target=worker, args=(worker_id,))
        threads.append(thread)
        thread.start()
        if delay:
            time.sleep(delay)
    return threads


if __name__ == "__main__":
    capacity = 3
    total_workers = 10
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–ø—É—Å–∫–∞, —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
    start_time = timestamp()
    print(
        f"[{start_time}] üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º {total_workers} —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ —Å –ª–∏–º–∏—Ç–æ–º {capacity} "
        "–æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–æ–≤\n"
    )

    # –°—Ç–∞—Ä—Ç—É–µ–º –ø–æ—Ç–æ–∫–æ–≤ —Å –Ω–µ–±–æ–ª—å—à–∏–º —Å–º–µ—â–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –ª–æ–≥ –≤—ã–≥–ª—è–¥–µ–ª –ø–ª–∞–≤–Ω–µ–µ.
    threads = launch_workers(total_workers, delay=0.1)

    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤ –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    for thread in threads:
        thread.join()

    print(f"[{timestamp()}] üéâ –í—Å–µ —Ä–∞–±–æ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
