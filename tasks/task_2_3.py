import threading
import time
from queue import PriorityQueue
from typing import Dict, List, Tuple

product_types = ["–µ–¥–∞", "–æ–¥–µ–∂–¥–∞", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"]

producers_config = [
    {"name": "–§–∞–±—Ä–∏–∫–∞-–ê", "type": "–µ–¥–∞", "count": 3},
    {"name": "–§–∞–±—Ä–∏–∫–∞-–ë", "type": "–æ–¥–µ–∂–¥–∞", "count": 4},
    {"name": "–§–∞–±—Ä–∏–∫–∞-–í", "type": "—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "count": 2},
]

priority_map = {"–µ–¥–∞": 1, "—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞": 2, "–æ–¥–µ–∂–¥–∞": 3}

TERMINATION_SENTINEL = (999, None)


def producer(queue: PriorityQueue, name: str, product_type: str, count: int) -> None:
    for index in range(count):
        item = f"{product_type} –æ—Ç {name}-{index}"
        priority = priority_map[product_type]
        queue.put((priority, item))
        print(f"üõ†Ô∏è  {name} –ø—Ä–æ–∏–∑–≤–µ–ª: {item} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority})")
        time.sleep(0.2)


def consumer(
    queue: PriorityQueue,
    name: str,
    accepted_types: List[str],
    process_all: bool = False,
) -> None:
    while True:
        priority, item = queue.get()

        if (priority, item) == TERMINATION_SENTINEL:
            queue.task_done()
            break

        product_type = item.split()[0]
        if process_all or product_type in accepted_types:
            print(f"üõí {name} –ø—Ä–∏–æ–±—Ä–µ–ª: {item} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority})")
            time.sleep(0.4)
        else:
            print(f"‚ö†Ô∏è  {name} –ø—Ä–æ–ø—É—Å—Ç–∏–ª: {item} (—Ç–∏–ø {product_type})")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –æ—á–µ—Ä–µ–¥—å, —á—Ç–æ–±—ã –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –¥—Ä—É–≥–∏–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
            queue.put((priority, item))
            time.sleep(0.1)

        queue.task_done()


def main() -> None:
    queue: PriorityQueue[Tuple[int, str]] = PriorityQueue()

    producers: List[threading.Thread] = [
        threading.Thread(
            target=producer,
            args=(queue, cfg["name"], cfg["type"], cfg["count"]),
            name=f"Producer-{cfg['name']}",
        )
        for cfg in producers_config
    ]

    consumers: List[threading.Thread] = [
        threading.Thread(
            target=consumer,
            args=(queue, "–ú–∞–≥–∞–∑–∏–Ω –≤—Å–µ—è–¥–Ω—ã–π", product_types),
            kwargs={"process_all": True},
            name="Consumer-Universal",
        ),
        threading.Thread(
            target=consumer,
            args=(queue, "–ë—É—Ç–∏–∫ –æ–¥–µ–∂–¥—ã", ["–æ–¥–µ–∂–¥–∞"]),
            name="Consumer-Clothes",
        ),
    ]

    for thread in producers + consumers:
        thread.start()

    for thread in producers:
        thread.join()

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
    for _ in consumers:
        queue.put(TERMINATION_SENTINEL)

    queue.join()

    for thread in consumers:
        thread.join()

    print("üéâ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∏ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")


if __name__ == "__main__":
    main()
